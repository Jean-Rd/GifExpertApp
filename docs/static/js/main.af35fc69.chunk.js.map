{"version":3,"sources":["components/AddCategory.js","components/GifGridItems.js","helpers/getGif.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","value","setValue","onSubmit","e","preventDefault","trim","length","val","className","type","onChange","target","placeholder","GifGridItems","url","title","href","rel","src","alt","getGif","category","a","encodeURI","fetch","request","json","data","gifs","map","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","img","useFetchGif","GifExpertApp","selected","setSelected","arrayVal","ReactDOM","render","document","getElementById"],"mappings":"mMAkCeA,EA/BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAElB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OACI,mCACG,sBAAMC,SAVQ,SAACC,GAClBA,EAAEC,iBACCJ,EAAMK,OAAOC,OAAS,IACrBR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAeO,OAChCN,EAAS,MAMV,SACI,uBAAOO,UAAU,QAAQC,KAAK,OAAOT,MAAOA,EAAOU,SAf1C,SAACP,GACjBF,EAASE,EAAEQ,OAAOX,QAc+DY,YAAY,sB,QCtBxFC,EAAe,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,MAC/B,OACI,mBAAGC,KAAMF,EAAKH,OAAO,SAASM,IAAI,aAAlC,SACI,sBAAKT,UAAU,8CAAf,UACI,qBAAKU,IAAKJ,EAAKK,IAAKJ,IACpB,6BAAKA,U,uBCPRK,EAAM,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEZR,EAFY,iDAEoCS,UAAUF,GAF9C,8DAIIG,MAAMV,GAJV,cAIZW,EAJY,gBAKKA,EAAQC,OALb,uBAKVC,EALU,EAKVA,KAEFC,EAAOD,EAAKE,KAAI,YAA0B,IAAxBC,EAAuB,EAAvBA,GAAIf,EAAmB,EAAnBA,MAAOgB,EAAY,EAAZA,OAC/B,MAAO,CACHD,GAAIA,EACJf,MAAOA,EACPD,IAAG,OAAEiB,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBlB,QAXpB,kBAeXc,GAfW,4CAAH,sDCMNK,EAAU,SAAC,GAAgB,IAAfZ,EAAc,EAAdA,SAGrB,ECLuB,SAACA,GAGxB,MAA4BtB,mBAAU,CAClC4B,KAAM,GACNO,SAAS,IAFb,mBAAQC,EAAR,KAAeC,EAAf,KAaA,OARAC,qBAAU,WACNjB,EAAQC,GACHiB,MAAM,SAAAC,GAAG,OAAIH,EAAS,CACnBT,KAAMY,EACNL,SAAS,SAElB,CAAEb,IAEEc,EDXwBK,CAAYnB,GAA/BU,EAAZ,EAAOJ,KAAaO,EAApB,EAAoBA,QAEpB,OACI,sBAAK1B,UAAU,OAAf,UACI,oBAAIA,UAAU,oCAAd,SAAoDa,IAElDa,GAAW,mBAAG1B,UAAU,mCAAb,yBAGTuB,EAAOF,KAAK,SAACU,GACT,OAAO,cAAC,EAAD,eAECA,GADCA,EAAIT,WEalBW,EA7BM,WAGjB,MAAgC1C,mBAAS,CAAC,UAA1C,mBAAO2C,EAAP,KAAiBC,EAAjB,KASA,OAAO,qCACH,oBAAInC,UAAU,WAAd,0BACA,cAAC,EAAD,CAAaV,cAAiB6C,IAC9B,uBACA,6BAEQD,EAASb,KAAI,SAAAe,GACT,OAAO,cAAC,EAAD,CAECvB,SAAYuB,GADNA,Y,MClBlCC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.af35fc69.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setCategories}) => {   \r\n\r\n    const [value, setValue] = useState(\"\");\r\n    // si queremos que el input estÃ© vacio, debemos poner un string vacio\r\n    // caso contrario la app manda un error.\r\n\r\n    const valueChange = (e) => {\r\n        setValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(value.trim().length > 2){\r\n            setCategories(val => [value, ...val]);\r\n            setValue(\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n           <form onSubmit={handleSubmit}>\r\n               <input className=\"input\" type=\"text\" value={value} onChange={valueChange} placeholder=\"Escriba aqui\"/>\r\n           </form>\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","import React from 'react'\r\n\r\nexport const GifGridItems = ({url, title}) => {\r\n    return (\r\n        <a href={url} target=\"_blank\" rel=\"noreferrer\">\r\n            <div className=\"grid-item animate__animated animate__fadeIn\">\r\n                <img src={url} alt={title}></img>\r\n                <h3>{title}</h3>\r\n            </div>\r\n        </a>\r\n    )\r\n}\r\n","export const getGif = async(category) => {\r\n        \r\n    const url =`https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=7&api_key=aqFsyAQsVAAVIBGQ0P7iyS5fvxK7IgXQ`;\r\n\r\n    const request = await fetch(url);\r\n    const { data } = await request.json();\r\n\r\n    const gifs = data.map(({id, title, images}) => {\r\n        return {\r\n            id: id,\r\n            title: title,\r\n            url: images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n// import { useState, useEffect } from 'react'\r\nimport { GifGridItems } from './GifGridItems'\r\n// import { getGif } from '../helpers/getGif'\r\nimport { useFetchGif } from '../hooks/useFetchGif'\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    \r\n    const {data:images, loading} = useFetchGif(category);\r\n\r\n    return (\r\n        <div className=\"grid\">\r\n            <h2 className=\"animate__animated animate__bounce\">{ category }</h2>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p> }\r\n\r\n            {\r\n                images.map( (img) => {\r\n                    return <GifGridItems \r\n                        key={img.id}\r\n                        {...img}\r\n                    />\r\n                })\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\n\r\nimport { getGif } from \"../helpers/getGif\";\r\n\r\nexport const useFetchGif = (category) => {\r\n\r\n\r\n    const [ state, setState ] = useState( {\r\n        data: [],\r\n        loading: true\r\n    } );\r\n    \r\n    useEffect(() => {\r\n        getGif( category )\r\n            .then( img => setState({\r\n                data: img,\r\n                loading: false\r\n            }) )\r\n    }, [ category ]) // Aca le decimos que la si la category cambia\r\n    // volvamos a ejecutar esta peticion.\r\n    return state;\r\n\r\n}\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nconst GifExpertApp = () => {\r\n\r\n\r\n    const [selected, setSelected] = useState([\"tokyo\"]);\r\n\r\n    //const handleAdd = () => {\r\n    //    const newArrat = [...selected, \"Maluma\"];\r\n    //    setSelected(newArrat);\r\n    //}\r\n    //<button onClick={handleAdd}>Subir</button>\r\n\r\n\r\n    return <>\r\n        <h2 className=\"appTitle\">GifExpertApp</h2>\r\n        <AddCategory setCategories = {setSelected} />\r\n        <hr></hr>\r\n        <ol>\r\n            {\r\n                selected.map(arrayVal => {\r\n                    return <GifGrid \r\n                            key= {arrayVal}\r\n                            category = {arrayVal} \r\n                            />\r\n                })\r\n            }\r\n        </ol>\r\n    </>\r\n};\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp'\n\nimport \"./index.css\"\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n)"],"sourceRoot":""}